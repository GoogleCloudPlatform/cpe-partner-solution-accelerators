# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     https://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

locals {
  vm_names = concat(keys(var.admin_vms_noauto), keys(var.admin_vms), keys(var.app_vms))
}

# For the primary domain (dns_custom_domain)

# WARNING: The private key generated by this resource will be stored unencrypted in your Terraform state file.
# Use of this resource for production deployments is not recommended.
# Instead, generate a private key file outside of Terraform and distribute it securely to the system where Terraform will be run.
resource "tls_private_key" "vmkey" {
  for_each = toset(local.vm_names)

  algorithm = "RSA"
}

resource "tls_cert_request" "vmcsr" {
  for_each = toset(local.vm_names)

  private_key_pem = tls_private_key.vmkey[each.key].private_key_pem
  subject {
    common_name  = "${each.key}.${trimsuffix(var.dns_custom_domain,".")}"
    organization = "Test"
  }
}

resource "google_privateca_certificate" "vmcrt" {
  for_each = toset(local.vm_names)

  pool                  = google_privateca_ca_pool.default.name
  certificate_authority = google_privateca_certificate_authority.default.certificate_authority_id
  location              = var.sites["fra"].region
  lifetime              = "31536000s"
  name                  = each.key
  pem_csr               = tls_cert_request.vmcsr[each.key].cert_request_pem
}

resource "local_file" "vm_key_pem" {
  for_each = toset(local.vm_names)

  content  = tls_private_key.vmkey[each.key].private_key_pem
  filename = "${path.module}/../../secrets/${each.key}_key.pem"
  file_permission = 640
}

resource "local_file" "vm_crt_pem" {
  for_each = toset(local.vm_names)

  content  = google_privateca_certificate.vmcrt[each.key].pem_certificate
  filename = "${path.module}/../../secrets/${each.key}_crt.pem"
  file_permission = 640
}

resource "local_file" "vm_chain_pem" {
  for_each = toset(local.vm_names)

  content  = google_privateca_certificate.vmcrt[each.key].pem_certificate_chain[0]
  filename = "${path.module}/../../secrets/${each.key}_chain.pem"
  file_permission = 640
}

# For the AD domain (ad_dns_domain)

# WARNING: The private key generated by this resource will be stored unencrypted in your Terraform state file.
# Use of this resource for production deployments is not recommended.
# Instead, generate a private key file outside of Terraform and distribute it securely to the system where Terraform will be run.
resource "tls_private_key" "vmadkey" {
  for_each = toset(local.vm_names)

  algorithm = "RSA"
}

resource "tls_cert_request" "vmadcsr" {
  for_each = toset(local.vm_names)

  private_key_pem = tls_private_key.vmadkey[each.key].private_key_pem
  subject {
    common_name  = "${each.key}.${trimsuffix(var.ad_dns_domain,".")}"
    organization = "Test"
  }
}

resource "google_privateca_certificate" "vmadcrt" {
  for_each = toset(local.vm_names)

  pool                  = google_privateca_ca_pool.default.name
  certificate_authority = google_privateca_certificate_authority.default.certificate_authority_id
  location              = var.sites["fra"].region
  lifetime              = "31536000s"
  name                  = "${each.key}-ad"
  pem_csr               = tls_cert_request.vmadcsr[each.key].cert_request_pem
}

resource "local_file" "vmad_key_pem" {
  for_each = toset(local.vm_names)

  content  = tls_private_key.vmadkey[each.key].private_key_pem
  filename = "${path.module}/../../secrets/${each.key}_ad_key.pem"
  file_permission = 640
}

resource "local_file" "vmad_crt_pem" {
  for_each = toset(local.vm_names)

  content  = google_privateca_certificate.vmadcrt[each.key].pem_certificate
  filename = "${path.module}/../../secrets/${each.key}_ad_crt.pem"
  file_permission = 640
}

resource "local_file" "vmad_chain_pem" {
  for_each = toset(local.vm_names)

  content  = google_privateca_certificate.vmadcrt[each.key].pem_certificate_chain[0]
  filename = "${path.module}/../../secrets/${each.key}_ad_chain.pem"
  file_permission = 640
}
