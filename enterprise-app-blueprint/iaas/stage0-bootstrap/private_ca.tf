# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     https://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

resource "google_privateca_ca_pool" "default" {
  name = "my-pool"
  location = var.sites["fra"].region
  tier = "ENTERPRISE"

  publishing_options {
    publish_ca_cert = true
    publish_crl = true
  }
  issuance_policy {
    baseline_values {
      ca_options {
        is_ca = true
        max_issuer_path_length = 10
      }
      key_usage {
        base_key_usage {
          digital_signature = true
          content_commitment = true
          key_encipherment = true
          data_encipherment = true
          key_agreement = true
          cert_sign = true
          crl_sign = true
          decipher_only = true
        }
        extended_key_usage {
         server_auth = true
          client_auth = true
          email_protection = true
          code_signing = true
          time_stamping = true
        }
      }

      name_constraints {
        critical                  = true
        permitted_dns_names       = ["*.${trimsuffix(var.dns_custom_domain,".")}", "*.${trimsuffix(var.ad_dns_domain,".")}"]
        permitted_ip_ranges       = ["10.0.0.0/8"]
        permitted_uris            = [".${trimsuffix(var.dns_custom_domain,".")}", ".${trimsuffix(var.ad_dns_domain,".")}"]
      }
    }
  }
}

resource "google_privateca_certificate_authority" "default" {
  certificate_authority_id = "my-ca"
  location                 = var.sites["fra"].region
  pool                     = google_privateca_ca_pool.default.name
  config {
    subject_config {
      subject {
        country_code        = "us"
        organization        = "acme"
        organizational_unit = "enterprise"
        locality            = "locality"
        province            = "province"
        street_address      = "street address"
        postal_code         = "12345"
        common_name         = "ca.${trimsuffix(var.dns_custom_domain,".")}"
      }
    }
    x509_config {
      ca_options {
        is_ca = true
      }
      key_usage {
        base_key_usage {
          cert_sign = true
          crl_sign  = true
        }
        extended_key_usage {
          server_auth = true
        }
      }
    }
  }
  type = "SELF_SIGNED"
  key_spec {
    algorithm = "RSA_PKCS1_4096_SHA256"
  }

  // Disable CA deletion related safe checks for easier cleanup.
  deletion_protection                    = false
  skip_grace_period                      = true
  ignore_active_certificates_on_deletion = true
}

# WARNING: The private key generated by this resource will be stored unencrypted in your Terraform state file.
# Use of this resource for production deployments is not recommended.
# Instead, generate a private key file outside of Terraform and distribute it securely to the system where Terraform will be run.
resource "tls_private_key" "test" {
  algorithm = "RSA"
}

resource "tls_cert_request" "test" {
  private_key_pem = tls_private_key.test.private_key_pem

  subject {
    common_name  = "test.${trimsuffix(var.dns_custom_domain,".")}"
    organization = "Test"
  }
}

resource "google_privateca_certificate" "test" {
  pool                  = google_privateca_ca_pool.default.name
  certificate_authority = google_privateca_certificate_authority.default.certificate_authority_id
  location              = var.sites["fra"].region
  lifetime              = "31536000s"
  name                  = "test"
  pem_csr               = tls_cert_request.test.cert_request_pem
}

resource "local_file" "test_key_pem" {
  content  = tls_private_key.test.private_key_pem
  filename = "${path.module}/../../secrets/test_key.pem"
  file_permission = 640
}

resource "local_file" "test_crt_pem" {
  content  = google_privateca_certificate.test.pem_certificate
  filename = "${path.module}/../../secrets/test_crt.pem"
  file_permission = 640
}

resource "local_file" "test_chain_pem" {
  content  = google_privateca_certificate.test.pem_certificate_chain[0]
  filename = "${path.module}/../../secrets/test_chain.pem"
  file_permission = 640
}
